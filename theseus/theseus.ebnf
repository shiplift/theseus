# Tokens
NEWLINE: "[\n\r]";
LAMBDA: "λ.";
ULAMBDA: "Λ.";
MU: "μ";
MAPSTO: "↦";
RIGHTWARDS_DOUBLE_ARROW: "⇒";
DEFINEDAS: "≔";
LEFT_PARENTHESIS: "\(";
RIGHT_PARENTHESIS: "\)";
LEFT_DOUBLE_ANGLE: "⟪";
RIGHT_DOUBLE_ANGLE: "⟫";
INTEGER: "[-+]?[0-9]+";
FLOAT: "[-+]?[0-9]*\.[0-9]+";
QSTRING: "‘[^’]*’";
QQSTRING: "“[^”]*”";
NAME: "[^0-9,\(\)⟪⟫ \n\r\t\f#][^,\(\)⟪⟫ \n\r\t\f#]*";
IGNORE: "[ \f\t]*|#[^\n]*";

# Productions
ship : [NEWLINE]* >toplevel_expressions<? [EOF]
     ;

toplevel_expressions : toplevel_expression ([NEWLINE]+ >toplevel_expressions< )* [NEWLINE]*
                     ;

toplevel_expression : <definition>
                    | <expression>
                    ;

expression : <constructor>
           | <application>
           | <lambda>
           | <variable>
           | <primitive>
           | <primary>
           ;

primary : <INTEGER>
        | <FLOAT>
        | <QSTRING> | <QQSTRING>
        ;

variable : NAME
         ;

definition : <lambda_definition>
           | <lambda_forward>
           | <value_definition>
           ;

lambda_definition : NAME [DEFINEDAS] lambda
                  ;
lambda_forward : NAME [DEFINEDAS] [ULAMBDA]
               ;
value_definition : NAME [DEFINEDAS] expression
                 ;

constructor : NAME constructor_args
            ;
constructor_args : [LEFT_PARENTHESIS] >arglist< [RIGHT_PARENTHESIS]
                 | [LEFT_PARENTHESIS] [RIGHT_PARENTHESIS]
                 ;

arglist : expression ([","] [NEWLINE]? expression)*
        ;

application : [MU] [LEFT_PARENTHESIS] [NEWLINE]? expression application_args [RIGHT_PARENTHESIS]
            | [MU] [LEFT_PARENTHESIS] [NEWLINE]? expression [RIGHT_PARENTHESIS]
            ;

application_args : ([","] [NEWLINE]? expression )+
                 ;

lambda : [LAMBDA] [NEWLINE]? >lambda_content<;

lambda_content : >rules<
               | rule
               ;

rules : [INTEGER] ["."] rule ([NEWLINE]+ >rules<)?
      ;

rule : patterns? [MAPSTO] >body<
     ;

body : continuation
     | expression
     ;

continuation : expression [RIGHTWARDS_DOUBLE_ARROW] [NEWLINE]? lambda_content
             ;

patterns : pattern ([","] [NEWLINE]? pattern)*
         ;

pattern : <constructor_pattern>
        | <variable_pattern>
        | <primary_pattern>
        ;

variable_pattern : >variable<
                 ;

primary_pattern : primary
                ;

constructor_pattern : NAME constructor_pattern_args
                    ;
constructor_pattern_args : [LEFT_PARENTHESIS] >pattern_arglist< [RIGHT_PARENTHESIS]
                         | [LEFT_PARENTHESIS] [RIGHT_PARENTHESIS]
                         ;

pattern_arglist : pattern ([","] [NEWLINE]? pattern)*
                ;

primitive : [LEFT_DOUBLE_ANGLE] NAME [RIGHT_DOUBLE_ANGLE]
          ;
# EOF
